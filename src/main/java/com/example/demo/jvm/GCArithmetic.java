package com.example.demo.jvm;

/**
 * 垃圾收集算法
 * 1、标记-清除-算法
 * 先标记出所有要回收的对象，然后将所有标记的对象回收。算法简单，效率一般，
 * 但是会有个空间问题，收集后会产生大量不连续的空间碎片，导致有些大对象没有办法放进去了
 * 2、复制算法
 * 一开始jvm会将内存分为大小相同的两块，每次使用一块，当一块区域满了之后，会将存活对象复制另一块区域并按顺序排好，
 * 然后将这块区域全部清空，
 * 当存活对象很少的话，效率高，但是如果存活对象很多的话效率就很差了，其次空间利用率低
 * 3、标记-整理-算法
 * 先标记出要回收的对象，然后让所有存活对象向一端移动，然后清理掉边界以外的对象，优点不会产生空间碎片
 * 4、分代收集算法
 * 对不同代采用不同算法
 * 年轻代存活对象很少（很多对象都是朝生夕死），所以采用复制算法
 * 老年代存活对象很多所以采用标记清除或者标记整理算法
 */
public class GCArithmetic {
}
